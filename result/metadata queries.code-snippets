{"Determine Whether a Database is Enabled for CDC":{
    "scope": "sql",
    "prefix": "ssmsDetermineWhetheraDatabaseisEnabledforCDC",
    "body": [
        "-- ========================================================",
        "-- Determine Whether a Database is Enabled for CDC Template",
        "-- ========================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "SELECT is_cdc_enabled FROM sys.databases",
        "WHERE name = N'${1:Database_Name}'",
        "GO",
        "",
        "",
        ""
    ],
    "description": "Determine Whether a Database is Enabled for CDC"
},"Determine Whether a Table is Enabled for CDC":{
    "scope": "sql",
    "prefix": "ssmsDetermineWhetheraTableisEnabledforCDC",
    "body": [
        "-- =====================================================",
        "-- Determine Whether a Table is Enabled for CDC Template",
        "-- =====================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "SELECT is_tracked_by_cdc FROM sys.tables",
        "WHERE object_id = object_id(N'${2:source_schema}.${3:source_name}')",
        "GO",
        "",
        "",
        ""
    ],
    "description": "Determine Whether a Table is Enabled for CDC"
},"Return All Accessible Database Capture Instances":{
    "scope": "sql",
    "prefix": "ssmsReturnAllAccessibleDatabaseCaptureInstances",
    "body": [
        "-- =========================================================",
        "-- Return All Accessible Database Capture Instances Template",
        "-- =========================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @capture_instances table (",
        "\t\tsource_schema           sysname,    ",
        "\t\tsource_table            sysname,    ",
        "\t\tcapture_instance\t\tsysname,\t",
        "\t\tobject_id\t\t\tint,\t\t",
        "\t\tsource_object_id\t\tint,\t\t",
        "\t\tstart_lsn\t\t\tbinary(10),\t",
        "\t\tend_lsn\t\t\tbinary(10)\tNULL,\t",
        "\t\tsupports_net_changes\tbit,\t\t",
        "\t\thas_drop_pending\t\tbit\t\tNULL,\t\t",
        "\t\trole_name\t\t\tsysname\tNULL,\t",
        "\t\tindex_name\t\t\tsysname\tNULL,\t",
        "\t\tfilegroup_name\t\tsysname\tNULL,\t\t\t\t ",
        "\t\tcreate_date\t\t\tdatetime,\t",
        "\t\tindex_column_list\t\tnvarchar(max) NULL, ",
        "\t\tcaptured_column_list\tnvarchar(max)) ",
        "",
        "INSERT INTO @capture_instances",
        "EXEC [sys].[sp_cdc_help_change_data_capture]",
        "",
        "SELECT source_schema, source_table, capture_instance",
        "FROM @capture_instances",
        "GO",
        ""
    ],
    "description": "Return All Accessible Database Capture Instances"
},"Return Captured Columns of Capture Instance":{
    "scope": "sql",
    "prefix": "ssmsReturnCapturedColumnsofCaptureInstance",
    "body": [
        "-- ==========================================================",
        "-- Return the Captured Columns of a Capture Instance Template",
        "-- ==========================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @captured_columns table (",
        "        source_schema\t\tsysname,",
        "\t\tsource_table\t\tsysname,",
        "\t\tcapture_instance\tsysname,",
        "\t\tcolumn_name\t\t\tsysname,",
        "\t    column_id\t\t\tint,",
        "\t\tordinal_position\tint,",
        "\t\tdata_type\t\t\tsysname,\t\t",
        "\t\tcharacter_maximum_length int     NULL,",
        "\t\tnumeric_precision\ttinyint\t\t NULL,",
        "\t\tnumeric_precision_radix smallint NULL,",
        "\t\tnumeric_scale\t\tint\t\t\t NULL,",
        "\t\tdatetime_precision\tsmallint\t NULL)",
        "",
        "INSERT INTO @captured_columns",
        "EXEC [sys].[sp_cdc_get_captured_columns] N'${2:capture_instance}'",
        "",
        "SELECT ordinal_position, column_name, data_type",
        "FROM @captured_columns",
        "ORDER BY ordinal_position",
        "GO",
        ""
    ],
    "description": "Return Captured Columns of Capture Instance"
},"Return DDL Changes to All Enabled Tables":{
    "scope": "sql",
    "prefix": "ssmsReturnDDLChangestoAllEnabledTables",
    "body": [
        "-- =====================================================",
        "-- Return the DDL Changes to All Enabled Tables Template",
        "-- =====================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @capture_instance sysname",
        "",
        "DECLARE @capture_instances table (",
        "\t\tsource_schema           sysname,    ",
        "\t\tsource_table            sysname,    ",
        "\t\tcapture_instance\t\tsysname,\t",
        "\t\tobject_id\t\t\t\tint,\t\t",
        "\t\tsource_object_id\t\tint,\t\t",
        "\t\tstart_lsn\t\t\t\tbinary(10),\t",
        "\t\tend_lsn\t\t\t\t\tbinary(10)\tNULL,\t",
        "\t\tsupports_net_changes\tbit,\t\t",
        "\t\thas_drop_pending\t\tbit\t\tNULL,\t\t",
        "\t\trole_name\t\t\t\tsysname\tNULL,\t",
        "\t\tindex_name\t\t\t\tsysname\tNULL,\t",
        "\t\tfilegroup_name\t\t\tsysname\tNULL,\t\t\t\t ",
        "\t\tcreate_date\t\t\t\tdatetime,\t",
        "\t\tindex_column_list\t\tnvarchar(max) NULL, ",
        "\t\tcaptured_column_list\tnvarchar(max))",
        "\t\t",
        "DECLARE @ddl_history table (",
        "        source_schema\t\tsysname,",
        "\t\tsource_table\t\tsysname,",
        "\t\tcapture_instance\tsysname,",
        "\t\trequired_column_update\tbit,\t\t",
        "\t\tddl_command\t\t\tnvarchar(max),",
        "\t\tddl_lsn\t\t\t\tbinary(10),",
        "\t\tddl_time\t\t\tdatetime)",
        "",
        "INSERT INTO @capture_instances",
        "EXEC [sys].[sp_cdc_help_change_data_capture]",
        "",
        "DECLARE #hinstance CURSOR LOCAL fast_forward",
        "FOR",
        "\tSELECT capture_instance  ",
        "\tFROM @capture_instances",
        "    ",
        "OPEN #hinstance",
        "FETCH #hinstance INTO @capture_instance",
        "\t",
        "WHILE (@@fetch_status ${2:} -1)",
        "BEGIN",
        "\tINSERT INTO @ddl_history",
        "\tEXEC [sys].[sp_cdc_get_ddl_history] @capture_instance",
        "\t\t\t",
        "\tFETCH #hinstance INTO @capture_instance",
        "END",
        "\t",
        "CLOSE #hinstance",
        "DEALLOCATE #hinstance",
        "",
        "SELECT source_schema, source_table, capture_instance, ddl_time, ddl_command",
        "FROM @ddl_history",
        "ORDER BY ddl_time",
        "GO",
        ""
    ],
    "description": "Return DDL Changes to All Enabled Tables"
},"Return DDL Changes to Enabled Source Table":{
    "scope": "sql",
    "prefix": "ssmsReturnDDLChangestoEnabledSourceTable",
    "body": [
        "-- ==========================================================",
        "-- Return the DDL Changes to an Enabled Source Table Template",
        "-- ==========================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @ddl_history table (",
        "        source_schema\t\tsysname,",
        "\t\tsource_table\t\tsysname,",
        "\t\tcapture_instance\tsysname,",
        "\t\trequired_column_update\tbit,\t\t",
        "\t\tddl_command\t\t\tnvarchar(max),",
        "\t\tddl_lsn\t\t\t\tbinary(10),",
        "\t\tddl_time\t\t\tdatetime)",
        "",
        "INSERT INTO @ddl_history",
        "EXEC [sys].[sp_cdc_get_ddl_history]",
        "\tN'${2:capture_instance}'",
        "",
        "SELECT source_schema, source_table, ddl_time, ddl_command",
        "FROM @ddl_history",
        "ORDER BY ddl_time",
        "GO",
        ""
    ],
    "description": "Return DDL Changes to Enabled Source Table"
}}