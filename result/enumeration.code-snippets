{"Append Commit Time to All Changes Result Set":{
    "scope": "sql",
    "prefix": "ssmsAppendCommitTimetoAllChangesResultSet",
    "body": [
        "-- =====================================================",
        "-- Append Commit Time to All Changes Result Set Template",
        "-- =====================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10), @to_lsn binary(10)",
        "",
        "SET @from_lsn =",
        "   sys.fn_cdc_get_min_lsn('${2:capture_instance}')",
        "SET @to_lsn   = sys.fn_cdc_get_max_lsn()",
        "",
        "SELECT q.*, m.tran_end_time AS COMMIT_TIME",
        "FROM cdc.fn_cdc_get_all_changes_${2:capture_instance}",
        "  (@from_lsn, @to_lsn, N'all') q",
        "INNER JOIN cdc.lsn_time_mapping m",
        "\tON q.__$start_lsn = m.start_lsn  ",
        "GO",
        ""
    ],
    "description": "Append Commit Time to All Changes Result Set"
},"Create Function fn_convertnumericlsntobinary":{
    "scope": "sql",
    "prefix": "ssmsCreateFunctionfn_convertnumericlsntobinary",
    "body": [
        "-- =====================================================",
        "-- Create Function fn_convertnumericlsntobinary Template",
        "-- =====================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "CREATE FUNCTION dbo.fn_convertnumericlsntobinary(",
        "\t@numericlsn numeric(25,0)",
        ") returns binary(10)",
        "AS",
        "BEGIN",
        "\tDECLARE @high4bytelsncomponent bigint,",
        "\t\t@mid4bytelsncomponent bigint,",
        "\t\t@low2bytelsncomponent int",
        "\tSELECT @high4bytelsncomponent = CONVERT(bigint, floor(@numericlsn / 1000000000000000))",
        "\tSELECT @numericlsn = @numericlsn - CONVERT(numeric(25,0), @high4bytelsncomponent) * 1000000000000000",
        "\tSELECT @mid4bytelsncomponent = CONVERT(bigint,floor(@numericlsn / 100000))",
        "\tSELECT @numericlsn = @numericlsn - CONVERT(numeric(25,0), @mid4bytelsncomponent) * 100000",
        "\tSELECT @low2bytelsncomponent = CONVERT(int, @numericlsn)",
        "\tRETURN CONVERT(binary(4), @high4bytelsncomponent) +",
        "\t\tCONVERT(binary(4), @mid4bytelsncomponent) +",
        "\t\tCONVERT(binary(2), @low2bytelsncomponent)",
        "END",
        "GO",
        ""
    ],
    "description": "Create Function fn_convertnumericlsntobinary"
},"Enumerate All Changes for Valid Range":{
    "scope": "sql",
    "prefix": "ssmsEnumerateAllChangesforValidRange",
    "body": [
        "-- ==================================================",
        "-- Enumerate All Changes for the Valid Range Template",
        "-- ==================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10), @to_lsn binary(10)",
        "SET @from_lsn =",
        "   sys.fn_cdc_get_min_lsn('${2:capture_instance}')",
        "SET @to_lsn   = sys.fn_cdc_get_max_lsn()",
        "SELECT * FROM cdc.fn_cdc_get_all_changes_${2:capture_instance}",
        "  (@from_lsn, @to_lsn, N'all')",
        "GO"
    ],
    "description": "Enumerate All Changes for Valid Range"
},"Enumerate All Changes Since Previous Request":{
    "scope": "sql",
    "prefix": "ssmsEnumerateAllChangesSincePreviousRequest",
    "body": [
        "-- =========================================================",
        "-- Enumerate All Changes Since the Previous Request Template",
        "-- =========================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10), @to_lsn binary(10), @previous_to_lsn binary(10)",
        "SET @previous_to_lsn = ${2:previous_to_lsn}",
        "SET @from_lsn = sys.fn_cdc_increment_lsn(@previous_to_lsn)",
        "SET @to_lsn   = sys.fn_cdc_get_max_lsn()",
        "SELECT * FROM cdc.fn_cdc_get_all_changes_${3:capture_instance}",
        "  (@from_lsn, @to_lsn, N'all')",
        "GO"
    ],
    "description": "Enumerate All Changes Since Previous Request"
},"Enumerate All Changes Up Until Now":{
    "scope": "sql",
    "prefix": "ssmsEnumerateAllChangesUpUntilNow",
    "body": [
        "-- ===========================================",
        "-- Enumerate All Changes Up Until Now Template",
        "-- ===========================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10), @to_lsn binary(10), @end_time datetime",
        "SET @from_lsn =",
        "   sys.fn_cdc_get_min_lsn('${2:capture_instance}')",
        "SET @end_time = GETDATE()",
        "",
        "DELAY:",
        "\tIF (sys.fn_cdc_map_lsn_to_time(sys.fn_cdc_get_max_lsn()) <= @end_time)",
        "\tBEGIN",
        "\t\tWAITFOR DELAY '00:01:00'",
        "\t\tGOTO DELAY",
        "\tEND",
        "\t",
        "SET @to_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal', @end_time)",
        "SELECT * FROM cdc.fn_cdc_get_all_changes_${2:capture_instance}",
        "  (@from_lsn, @to_lsn, N'all')",
        "GO"
    ],
    "description": "Enumerate All Changes Up Until Now"
},"Enumerate Net Changes for Valid Range":{
    "scope": "sql",
    "prefix": "ssmsEnumerateNetChangesforValidRange",
    "body": [
        "-- ==================================================",
        "-- Enumerate Net Changes for the Valid Range Template",
        "-- ==================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10), @to_lsn binary(10)",
        "SET @from_lsn =",
        "   sys.fn_cdc_get_min_lsn('${2:capture_instance}')",
        "SET @to_lsn   = sys.fn_cdc_get_max_lsn()",
        "SELECT * FROM cdc.fn_cdc_get_net_changes_${2:capture_instance}",
        "  (@from_lsn, @to_lsn, N'all')",
        "GO",
        ""
    ],
    "description": "Enumerate Net Changes for Valid Range"
},"Enumerate Net Changes Using All With Mask":{
    "scope": "sql",
    "prefix": "ssmsEnumerateNetChangesUsingAllWithMask",
    "body": [
        "-- ==================================================",
        "-- Enumerate Net Changes Using All With Mask Template",
        "-- ==================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10),",
        "\t@to_lsn binary(10),",
        "\t@column_ordinal int",
        "",
        "SET @from_lsn =",
        "   sys.fn_cdc_get_min_lsn('${2:capture_instance}')",
        "SET @to_lsn   = sys.fn_cdc_get_max_lsn()",
        "SET @column_ordinal = sys.fn_cdc_get_column_ordinal",
        "\t(N'${2:capture_instance}',",
        "\t N'${3:column_name}')",
        "",
        "SELECT *,",
        "\tsys.fn_cdc_is_bit_set(@column_ordinal, __$update_mask)",
        "\t\tAS ${3:column_name}_changed",
        "FROM cdc.fn_cdc_get_net_changes_${2:capture_instance}",
        "  (@from_lsn, @to_lsn, N'all with mask')",
        "GO",
        ""
    ],
    "description": "Enumerate Net Changes Using All With Mask"
},"Enumerate Net Changes Using TRY CATCH":{
    "scope": "sql",
    "prefix": "ssmsEnumerateNetChangesUsingTRYCATCH",
    "body": [
        "-- ==============================================",
        "-- Enumerate Net Changes Using TRY CATCH Template",
        "-- ==============================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10), @to_lsn binary(10)",
        "SET @from_lsn =",
        "   sys.fn_cdc_get_min_lsn('${2:capture_instance}')",
        "SET @to_lsn   = sys.fn_cdc_get_max_lsn()",
        "",
        "BEGIN TRY ",
        "SELECT * FROM cdc.fn_cdc_get_all_changes_${2:capture_instance}",
        "  \t\t(@from_lsn, @to_lsn, N'all')",
        "END TRY",
        "",
        "BEGIN CATCH",
        "\tDECLARE",
        "        @ERROR_SEVERITY INT,",
        "        @ERROR_STATE INT,",
        "        @ERROR_NUMBER INT,",
        "        @ERROR_LINE INT,",
        "        @ERROR_MESSAGE VARCHAR(245)",
        " ",
        "    SELECT",
        "        @ERROR_SEVERITY = ERROR_SEVERITY(),",
        "        @ERROR_STATE = ERROR_STATE(),",
        "        @ERROR_NUMBER = ERROR_NUMBER(),",
        "        @ERROR_LINE = ERROR_LINE(),",
        "        @ERROR_MESSAGE = ERROR_MESSAGE()",
        " ",
        "\tIF @ERROR_NUMBER = 313",
        "\t\tRAISERROR(",
        "\t\t\t'Either a range parameter or the row filter option is not valid.', ",
        "\t\t\t@ERROR_SEVERITY, @ERROR_STATE)",
        "\tELSE",
        "\tIF @ERROR_NUMBER = 229",
        "\t\tRAISERROR(",
        "\t\t\t'The caller is not authorized to perform the query.', ",
        "\t\t\t@ERROR_SEVERITY, @ERROR_STATE)",
        "\tELSE",
        "\t\tRAISERROR('Msg %d, Line %d: %s',",
        "\t\t\t@ERROR_SEVERITY, @ERROR_STATE, @ERROR_NUMBER,",
        "\t\t\t@ERROR_LINE, @ERROR_MESSAGE) ",
        "END CATCH ",
        "GO",
        ""
    ],
    "description": "Enumerate Net Changes Using TRY CATCH"
},"Get Net Changes Using Wrapper With Update Flags":{
    "scope": "sql",
    "prefix": "ssmsGetNetChangesUsingWrapperWithUpdateFlags",
    "body": [
        "-- ==========================================================",
        "-- Get Net Changes Using a Wrapper With Update Flags Template",
        "-- ==========================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "SELECT * FROM fn_net_changes_${2:capture_instance}",
        "  (NULL, NULL, N'all with mask')",
        "GO",
        ""
    ],
    "description": "Get Net Changes Using Wrapper With Update Flags"
},"Query for All Changes With Wrapper Function":{
    "scope": "sql",
    "prefix": "ssmsQueryforAllChangesWithWrapperFunction",
    "body": [
        "-- ======================================================",
        "-- Query for All Changes With a Wrapper Function Template",
        "-- ======================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "SELECT * FROM fn_all_changes_${2:capture_instance}",
        "  (NULL, NULL, N'all')",
        "GO",
        ""
    ],
    "description": "Query for All Changes With Wrapper Function"
},"Query for Net Changes With Wrapper Function":{
    "scope": "sql",
    "prefix": "ssmsQueryforNetChangesWithWrapperFunction",
    "body": [
        "-- ======================================================",
        "-- Query for Net Changes With a Wrapper Function Template",
        "-- ======================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "SELECT * FROM fn_net_changes_${2:capture_instance}",
        "  (NULL, NULL, N'all')",
        "GO",
        ""
    ],
    "description": "Query for Net Changes With Wrapper Function"
},"Return All Changes With Given tran_begin_lsn":{
    "scope": "sql",
    "prefix": "ssmsReturnAllChangesWithGiventran_begin_lsn",
    "body": [
        "-- =======================================================",
        "-- Return All Changes With a Given tran_begin_lsn Template",
        "-- =======================================================",
        "USE ${1:Database_Name}",
        "GO",
        "",
        "DECLARE @from_lsn binary(10),",
        "\t@to_lsn binary(10),",
        "\t@database_transaction_begin_lsn numeric(25,0)",
        "",
        "SET @from_lsn =",
        "   sys.fn_cdc_get_min_lsn('${2:capture_instance}')",
        "SET @to_lsn   = sys.fn_cdc_get_max_lsn()",
        "SET @database_transaction_begin_lsn = ${3:0),database_transaction_begin_lsn}",
        "",
        "SELECT q.* ",
        "FROM cdc.fn_cdc_get_all_changes_${2:capture_instance}",
        "  (@from_lsn, @to_lsn, N'all') q",
        "INNER JOIN cdc.lsn_time_mapping m",
        "\tON q.__$start_lsn = m.start_lsn",
        "WHERE dbo.fn_convertnumericlsntobinary(@database_transaction_begin_lsn) = m.tran_begin_lsn",
        "GO",
        ""
    ],
    "description": "Return All Changes With Given tran_begin_lsn"
}}