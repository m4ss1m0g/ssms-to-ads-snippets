{"Alter Partition Function Merge":{
    "scope": "sql",
    "prefix": "ssmsAlterPartitionFunctionMerge",
    "body": [
        "-- ==========================================",
        "-- Alter Partition Function Merge template",
        "-- ==========================================",
        "USE ${1:AdventureWorks}",
        "GO",
        "",
        "-- Create the partition function with an original defined range",
        "CREATE PARTITION FUNCTION ${2:myRangePF} ( ${3:int} )",
        "AS RANGE LEFT FOR VALUES (${4:1}, ${5:100}, ${6:1000});",
        "GO",
        "",
        "-- Merge the partitions between boundary_values ${4:1} and ${5:100}",
        "-- and between boundary_values ${5:100} and ${6:1000} to create one partition",
        "-- between boundary_values ${4:1} and ${6:1000}.",
        "ALTER PARTITION FUNCTION ${2:myRangePF} ()",
        "MERGE RANGE (${5:100});",
        "GO",
        "",
        " ",
        ""
    ],
    "description": "Alter Partition Function Merge"
},"Alter Partition Function Split":{
    "scope": "sql",
    "prefix": "ssmsAlterPartitionFunctionSplit",
    "body": [
        "-- ==========================================",
        "-- Alter Partition Function Split template",
        "-- ==========================================",
        "USE ${1:AdventureWorks}",
        "GO",
        "",
        "-- Create the partition function with an original defined range",
        "CREATE PARTITION FUNCTION ${2:myRangePF} ( ${3:int} )",
        "AS RANGE LEFT FOR VALUES (${4:1}, ${5:100}, ${6:1000});",
        "GO",
        "",
        "--Split the partition between boundary_values ${5:100} and ${6:1000}",
        "--to create two partitions between boundary_values ${5:100} and ${7:500}",
        "--and between boundary_values ${7:500} and ${6:1000}.",
        "ALTER PARTITION FUNCTION ${2:myRangePF} ()",
        "SPLIT RANGE (${7:500});",
        "GO",
        "",
        " ",
        ""
    ],
    "description": "Alter Partition Function Split"
},"Create Partition Function":{
    "scope": "sql",
    "prefix": "ssmsCreatePartitionFunction",
    "body": [
        "-- =====================================",
        "-- Create Partition Function template",
        "-- =====================================",
        "USE ${1:AdventureWorks}",
        "GO",
        "",
        "CREATE PARTITION FUNCTION ${2:myRangePF} ( ${3:int} )",
        "AS RANGE LEFT FOR VALUES (${4:1}, ${5:100}, ${6:1000});",
        "",
        "-- Partition function on a partitioning column col1 would be partitioned as follows:",
        "-- Partition 1: col1 less than or equal to ${4:1}",
        "-- Partition 2: col1 greater than ${4:1} AND col1 less than or equal to ${5:100}",
        "-- Partition 3: col1 greater than ${5:100} AND col1 less than or equal to ${6:1000}",
        "-- Partition 4: col1 greater than ${6:1000}",
        ""
    ],
    "description": "Create Partition Function"
},"Create Partitioned Table":{
    "scope": "sql",
    "prefix": "ssmsCreatePartitionedTable",
    "body": [
        "--====================================================",
        "-- Create partitioned table template",
        "--",
        "-- This template assumes AdventureWorks database  ",
        "-- has three filegroups named,",
        "--\t\tPRIMARY",
        "--\t\tTransactionHistoryGroup",
        "--      WorkOrderGroup",
        "--====================================================",
        "USE AdventureWorks",
        "GO",
        "",
        "-- Drop existing objects in reverse order, if necessary",
        "IF OBJECT_ID('${1:dbo}.${2:partition_table_name}', 'U') IS NOT NULL",
        "  DROP TABLE ${1:dbo}.${2:partition_table_name}",
        "GO",
        "",
        "IF EXISTS( ",
        "  SELECT * ",
        "    FROM sys.partition_schemes",
        "   WHERE name = N'${3:partition_scheme_name}'",
        ")",
        "\tDROP PARTITION SCHEME ${3:partition_scheme_name}",
        "GO",
        "",
        "IF EXISTS( ",
        "  SELECT * ",
        "    FROM sys.partition_functions",
        "   WHERE name = N'${4:part_function_name}'",
        ")",
        "\tDROP PARTITION FUNCTION ${4:part_function_name}",
        "GO",
        "",
        "-- Create partition function",
        "CREATE PARTITION FUNCTION ${4:part_function_name}(${5:int})",
        "AS ",
        "\tRANGE LEFT FOR VALUES (1, 1000)",
        "GO",
        "",
        "-- Create partition scheme",
        "CREATE PARTITION SCHEME ${3:partition_scheme_name}",
        "AS ",
        "\tPARTITION ${4:part_function_name} TO ([PRIMARY], TransactionHistoryGroup, WorkOrderGroup)",
        "GO",
        "",
        "-- Create table on partition scheme",
        "CREATE TABLE ${1:dbo}.${2:partition_table_name} ",
        "(",
        "\tcol1 int, ",
        "    col2 char(10)",
        ")",
        "\tON ${3:partition_scheme_name} (col1) ",
        "GO",
        ""
    ],
    "description": "Create Partitioned Table"
},"Drop Partition Function":{
    "scope": "sql",
    "prefix": "ssmsDropPartitionFunction",
    "body": [
        "-- ==========================",
        "-- Drop Partition Function",
        "-- ==========================",
        "",
        "-- A partition function can be dropped only if there are no partition ",
        "-- schemes currently using the partition function.",
        "DROP PARTITION FUNCTION ${1:myRangePF};",
        "GO",
        ""
    ],
    "description": "Drop Partition Function"
}}