{"Create Request Response Contract":{
    "scope": "sql",
    "prefix": "ssmsCreateRequestResponseContract",
    "body": [
        "-- =============================================",
        "-- Create Request Response Application Template",
        "-- =============================================",
        "",
        "",
        "--  Create the stored procedure",
        "",
        "if exists (select 1 from sys.procedures where [object_id] = OBJECT_ID(N'[dbo].[${1:test_proc}]'))",
        "drop procedure [dbo].[${2:test-proc}]",
        "GO",
        "SET ANSI_NULLS ON",
        "go",
        "SET QUOTED_IDENTIFIER ON",
        "go",
        "",
        "CREATE PROCEDURE [dbo].[${2:test-proc}]",
        "   AS declare @message_body varbinary(MAX)",
        "   ",
        "   declare @message_type int",
        "   declare @dialog uniqueidentifier ",
        "",
        "",
        "",
        "while (1 = 1)",
        "begin",
        "\tbegin transaction",
        "",
        "-- Receive the next available message from the queue",
        "\t",
        "\tWAITFOR (",
        "\t\tRECEIVE top(1) -- just handle one message at a time",
        "\t\t\t@message_type=message_type_id, --the type of message received",
        "\t\t\t@message_body=message_body,      -- the message contents",
        "\t\t\t@dialog = conversation_handle    -- the identifier of the dialog this message was received on",
        "\t\t\tFROM ${3:test_queue}",
        "\t), TIMEOUT 1000  -- if the queue is empty for one second, give UPDATE and go away",
        "",
        "-- If we didn't get anything, bail out",
        "\tif (@@ROWCOUNT = 0)",
        "\t\tBEGIN",
        "\t\t\tRollback Transaction",
        "\t\t\tBREAK",
        "\t\tEND ",
        "",
        "-- Check for the End Dialog message.",
        "\tIf (@message_type ${4:} 2) -- End dialog message",
        "\tBEGIN",
        "-- Send the message back to the sender.",
        "\t\tSEND ON CONVERSATION @dialog  -- send it back on the dialog we received the message on",
        "\t\t\tMESSAGE TYPE [${5:test_msg_resp}] -- Must always supply a message type",
        "\t\t\t(@message_body);  -- the message contents (a varbinary(MAX) blob",
        "\tEND",
        "",
        "--  Commit the transaction.  At any point before this, we could roll ",
        "--  back - the received message would be back on the queue and the response",
        "--  wouldn't be sent.",
        "\tcommit transaction",
        "end",
        "go",
        "",
        "",
        "-- Create the required meta-data",
        "",
        "CREATE MESSAGE TYPE ${6:test_msg_req} VALIDATION = NONE ",
        "",
        "CREATE MESSAGE TYPE ${5:test_msg_resp} VALIDATION = NONE ",
        "",
        "CREATE CONTRACT ${7:test_contract}",
        "  ( ${6:test_msg_req} SENT BY INITIATOR,",
        "    ${5:test_msg_resp} SENT BY TARGET)",
        "",
        "CREATE QUEUE ${3:test_queue}",
        "",
        "CREATE SERVICE [${8:test_service}] ",
        "ON QUEUE ${3:test_queue}",
        "",
        "ALTER SERVICE [${8:test_service}] ",
        " ( ADD CONTRACT ${7:test_contract} )",
        "",
        ""
    ],
    "description": "Create Request Response Contract"
},"Create Request Response with Activation":{
    "scope": "sql",
    "prefix": "ssmsCreateRequestResponsewithActivation",
    "body": [
        "",
        "-- ============================================================",
        "-- Create Request Response Application with Activation Template",
        "-- ============================================================",
        "",
        "",
        "",
        "--  Create the stored procedure",
        "",
        "If EXISTS (select 1 from sys.procedures where [object_id] = OBJECT_ID(N'[dbo].[${1:test_proc}]'))",
        "drop procedure [dbo].[${1:test_proc}]",
        "GO",
        "SET ANSI_NULLS ON",
        "go",
        "SET QUOTED_IDENTIFIER ON",
        "go",
        "",
        "CREATE PROCEDURE [dbo].[${1:test_proc}]",
        "   AS declare @message_body varbinary(MAX)",
        "   ",
        "   declare @message_type int",
        "   declare @dialog uniqueidentifier ",
        "",
        "",
        "",
        "while (1 = 1)",
        "begin",
        "\tbegin transaction",
        "",
        "-- Receive the next available message from the queue",
        "\t",
        "\tWAITFOR (",
        "\t\tRECEIVE top(1) -- just handle one message at a time",
        "\t\t\t@message_type=message_type_id, --the type of message received",
        "\t\t\t@message_body=message_body,      -- the message contents",
        "\t\t\t@dialog = conversation_handle    -- the identifier of the dialog this message was received on",
        "\t\t\tFROM ${2:test_queue}",
        "\t), TIMEOUT 1000  -- if the queue is empty for one second, give UPDATE and go away",
        "",
        "-- If we didn't get anything, bail out",
        "\tif (@@ROWCOUNT = 0)",
        "\t\tBEGIN",
        "\t\t\tRollback Transaction",
        "\t\t\tBREAK",
        "\t\tEND ",
        "",
        "-- Check for the End Dialog message.",
        "\tIf (@message_type ${3:} 2) -- End dialog message",
        "\tBEGIN",
        "-- Send the message back to the sender.",
        "\t\tSEND ON CONVERSATION @dialog  -- send it back on the dialog we received the message on",
        "\t\t\tMESSAGE TYPE [${4:test_msg_resp}] -- Must always supply a message type",
        "\t\t\t(@message_body);  -- the message contents (a varbinary(MAX) blob",
        "\tEND",
        "",
        "--  Commit the transaction.  At any point before this, we could roll ",
        "--  back - the received message would be back on the queue and the response",
        "--  wouldn't be sent.",
        "\tcommit transaction",
        "end",
        "go",
        "",
        "",
        "-- Create the required meta-data",
        "",
        "",
        "CREATE MESSAGE TYPE ${5:test_msg_req} VALIDATION = NONE ",
        "",
        "CREATE MESSAGE TYPE ${4:test_msg_resp} VALIDATION = NONE ",
        "",
        "CREATE CONTRACT ${6:test_contract}",
        "  ( ${5:test_msg_req} SENT BY INITIATOR,",
        "    ${4:test_msg_resp} SENT BY TARGET)",
        "",
        "CREATE QUEUE ${2:test_queue}",
        "   WITH ACTIVATION (",
        "      PROCEDURE_NAME = [${1:test_proc}] ,",
        "      MAX_QUEUE_READERS = 5, ",
        "      EXECUTE AS SELF ) ",
        "",
        "CREATE SERVICE [${7:test_service}] ",
        "   ON QUEUE ${2:test_queue}",
        "",
        "ALTER SERVICE [${7:test_service}] ",
        " ( ADD CONTRACT ${6:test_contract} )",
        ""
    ],
    "description": "Create Request Response with Activation"
}}